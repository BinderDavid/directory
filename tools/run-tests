#!/bin/sh
# run all of the tests under the `tests` directory using the GHC test
# framework; for more info about this framework, see:
# https://ghc.haskell.org/trac/ghc/wiki/Building/RunningTests
#
# arguments received by this script are passed as arguments to the `make`
# invocation that initiates the tests
set -e

# check if `-package-db` is supported (didn't exist until 1.20)
# note that we don't use `-package-db` directly because older versions will
# interpret it as `-package -db`
if ghc 2>&1 -no-user-package-db |
   grep >/dev/null 2>&1 "ghc: unrecognised flags: -no-user-package-db"
then db=conf
else db=db
fi

# guess which package db(s) we should use;
# very dirty hack but cabal doesn't expose it to us directly
if [ -f cabal.sandbox.config ]
then
    patt="s/'/'\\\\''/g"
    dbfn=`grep 'package-db: [^, }]*' cabal.sandbox.config \
        | sed 's/^[^:]*: //'`
    HSFLAGS="-package-$db $dbfn "$HSFLAGS
fi
if [ -f dist/package.conf.inplace ]
then
    HSFLAGS="-package-$db ../dist/package.conf.inplace "$HSFLAGS
fi
if [ -f dist/build/autogen/cabal_macros.h ]
then
    cabal_macros='-optP-include -optP../dist/build/autogen/cabal_macros.h'
elif [ -f build/autogen/cabal_macros.h ]
then
    cabal_macros='-optP-include -optP../build/autogen/cabal_macros.h'
fi
HSFLAGS="$cabal_macros "$HSFLAGS
HSFLAGS=`printf "%s" "$HSFLAGS" | sed 's/ *$//'`
export HSFLAGS

# extract the test framework if needed
[ -f dist/testsuite/ghc-test-framework.ok ] || (
    set -e
    mkdir -p dist/testsuite
    cd dist/testsuite
    rm -fr ghc-test-framework
    sh
    touch ghc-test-framework.ok
) <tools/ghc-test-framework.shar

# we can't just specify `TOP` as an argument for `make` because it will
# override `TOP` for *every* included makefile
sed >dist/testsuite/Makefile \
    "s|^TOP=.*$|TOP=../dist/testsuite/ghc-test-framework|" \
    tests/Makefile

cd tests
make -f ../dist/testsuite/Makefile WAY=normal EXTRA_HC_OPTS="$HSFLAGS" "$@" |
    tee ../dist/testsuite/test.out

# since the test framework doesn't report an exit status, we need to manually
# find out whether the test had any failures>
{
    grep '^ *0 had missing libraries$'     ../dist/testsuite/test.out
    grep '^ *0 caused framework failures$' ../dist/testsuite/test.out
    grep '^ *0 unexpected passes$'         ../dist/testsuite/test.out
    grep '^ *0 unexpected failures$'       ../dist/testsuite/test.out
    grep '^ *0 unexpected stat failures$'  ../dist/testsuite/test.out
} >/dev/null 2>/dev/null
